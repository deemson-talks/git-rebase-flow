section
    h1 Git Rebase Flow
section
    img(src='assets/git-data-transport-commands.png')
section
    h1 Reset
section
    div 3 types of resets in Git
    pre
        code.shell git reset --soft
    pre
        code.shell git reset --mixed
    pre
        code.shell git reset --hard
section
    h1 Example
section
    div Let's init an empty git repo
        pre
            code.shell git init
    div.fragment.fade-up
        div Then create three empty files
        pre
            code.shell touch file1 && touch file2 && touch file3
    div.fragment.fade-up
        div And commit them in three different commits
        pre
            code.shell
                include ../snippets/3commits.sh
section
    div History will look like the following
        pre
            code.shell git log --format=oneline --abbrev-commit
        pre
            code.text
                include ../snippets/3commits-log.git
section
    div Let's do a soft reset
        pre
            code.shell git reset HEAD~2 --soft
    div.fragment.fade-up
        pre
            code.shell git status
        pre
            code.text
                include ../snippets/3commits-reset-soft-status.git
section
    div Let's do a mixed reset
        pre
            code.shell git reset HEAD~2 --mixed
    div.fragment.fade-up
        div Or simply
            pre
                code.shell git reset HEAD~2
    div.fragment.fade-up
        pre
            code.shell git status
        pre
            code.text
                include ../snippets/3commits-reset-mixed-status.git
section
    div Soft
    pre
        code.text
            include ../snippets/3commits-reset-soft-status.git
    h3 VS
    div Mixed
    pre
        code.text
            include ../snippets/3commits-reset-mixed-status.git
section
    div Let's do a hard reset
        pre
            code.shell git reset HEAD~2 --hard
    div.fragment.fade-up
        pre
            code.shell git status
        pre
            code.text
                include ../snippets/3commits-reset-hard-status.git
    div.fragment.fade-up
        pre
            code.shell ls
        pre
            code.text file1
section
    h3 Reset: Take Away notes
    ul
        li
            div Soft &mdash; reset local repo, but leave index and workspace as they are
            pre
                code.shell git reset --soft &lt;commit&gt;
        li
            div Mixed &mdash; reset local repo and index, but leave workspace as it is
            pre
                code.shell git reset &lt;commit&gt;
        li
            div Hard &mdash; reset local repo, index and workspace
            pre
                code.shell git reset --hard &lt;commit&gt;
section
    h1 Rebasing Basics
section
    div Your everyday rebase command
    pre
        code.shell git rebase --onto &lt;new-base&gt; &lt;upstream&gt; &lt;branch&gt;
section
    pre
        code.shell git rebase --onto &lt;new-base&gt; &lt;upstream&gt; &lt;branch&gt;
    ol
        li.fragment.fade-up git checkout &lt;branch&gt;
        li.fragment.fade-up save commits in &lt;upstream&gt;..HEAD
        li.fragment.fade-up git reset --hard &lt;upstream&gt;
        li.fragment.fade-up git checkout &lt;new-base&gt;
        li.fragment.fade-up apply saved commits in &lt;upstream&gt;..HEAD
section
    pre
        code.shell git rebase --onto master master feature
    section
        img(src='assets/rebase1.jpg' width='40%')
    section
        img(src='assets/rebase2.jpg' width='40%')
    section
        img(src='assets/rebase3.jpg' width='40%')
    section
        img(src='assets/rebase4.jpg' width='40%')
    section
        img(src='assets/rebase5.jpg' width='40%')
section
    pre
        code.shell git rebase --onto master master feature
    div simplified
    pre
        code.shell git rebase master
section
    pre
        code.shell git rebase master feature1
    section
        img(src='assets/rebase2-1.jpg' width='40%')
    section
        img(src='assets/rebase2-2.jpg' width='40%')
section
    h3 What if there are conflicts?
section
    section
        img(src='assets/rebase-conflict1.jpg' width='40%')
    section
        img(src='assets/rebase-conflict2.jpg' width='40%')
    section
        img(src='assets/rebase-conflict3.jpg' width='40%')
    section
        img(src='assets/rebase-conflict4.jpg' width='40%')
    section
        div Rebase stopped. You have two options
        ol
            li.fragment.fade-up git rebase --abort
            li.fragment.fade-up resolve conflicts and git rebase --continue
    section
        div To resolve conflicts you need to
        ul
            li.fragment.fade-up edit conflicting files and resolve all of the conflicts
            li.fragment.fade-up git add all the resolved files
            li.fragment.fade-up git rebase --continue
    section
        img(src='assets/rebase-conflict5.jpg' width='40%')
section
    h3 Rebase: Take Away Notes
    ol(style='width: 90%;')
        li
            pre
                code.shell git checkout &lt;feature-branch&gt;
        li
            div If you rebase over target
            pre
                code.shell git rebase &lt;target&gt;
            div If you rebase to somewhere else
            pre
                code.shell git rebase --onto &lt;somewhere-else&gt; &lt;commit-to-compare&gt;
section
    h1 Reflog
section
    div Let's reiterate the example with 3 files (the slides about git reset)
section
    div Init an empty git repo
        pre
            code.shell git init
    div.fragment.fade-up
        div Then create three empty files
        pre
            code.shell touch file1 && touch file2 && touch file3
    div.fragment.fade-up
        div And commit them in three different commits
        pre
            code.shell
                include ../snippets/3commits.sh
section
    div Current reflog
        pre
            code.shell git reflog
        pre.fragment.fade-up
            code.text
                include ../snippets/3commits-reflog1.git
section
    div To go back in time you do one of the following
    ul
        li.fragment.fade-up git reset --hard on a concrete hash
        li.fragment.fade-up git reset --hard HEAD@{N} to go N steps back
section
    div After the soft reset had been shown, I went back in time.
    div.fragment.fade-up
        div Reflog changed to
        pre
            code.text
                include ../snippets/3commits-reflog2.git
section
    div Then there was mixed reset.
    div.fragment.fade-up
        div Reflog changed to
        pre
            code.text
                include ../snippets/3commits-reflog3.git
section
    h3 Reflog: Take Away Notes
    ol(style='width: 70%;')
        li
            pre
                code.shell git reflog
        li
            pre
                code.shell git reset --hard &lt;hash&gt;
            div or
            pre
                code.shell git reset --hard HEAD@{N}
section
    h3 Just One More Thing
    ul
        li try stuff
        li screw up
        li reflog back
        li try stuff again
section
    h1 Interactive Rebase
section
    pre
        code.shell git rebase --interactive --onto &lt;new-base&gt; &lt;upstream&gt; &lt;branch&gt;
section
    div Rebase your last three commits on master
    pre
        code.shell git rebase -i --onto master HEAD~3
section
    div Example with 3 files!
section
    pre
        code.shell git init
    pre
        code.shell touch file1 && touch file2 && touch file3
    pre
        code.shell
            include ../snippets/3commits.sh
section
    section
        pre
            code.shell git rebase -i HEAD~2
    section
        pre
            code.text
                include ../snippets/irebase1.git
    section
        pre
            code.text
                include ../snippets/irebase2.git
    section
        pre
            code.text
                include ../snippets/irebase3.git
    section
        pre
            code.text
                include ../snippets/irebase4.git
section
    h1 Fast Forward
section
    div.fragment.fade-up Merge will fast forward when it's able or do a merge commit otherwise
    pre
        code.shell git merge &lt;hash&gt;
    div.fragment.fade-up No-ff will always make a merge commit
    pre
        code.shell git merge --no-ff &lt;hash&gt;
    div.fragment.fade-up Ff-only will try to do a fast forward or fail if it's not possible
    pre
        code.shell git merge --ff-only &lt;hash&gt;
section
    section
        div Fast forward possible!
        img(src='assets/ff1.jpg' width='40%')
    section
        img(src='assets/ff2.jpg' width='40%')
    section
        div Using --no-ff flag will force a merge commit even though fast forward is possible
        img(src='assets/ff3.jpg' width='40%')
    section
        div Fast forward is not possible!
        img(src='assets/ff4.jpg' width='40%')
section
    h3 Fast Forward: Takeaway Notes
    ul(style='width: 70%;')
        li Don't use default merge
        li
            div no-ff for branching flow
            pre
                code.shell git merge --no-ff &lt;hash&gt;
        li
            div ff-only for rebase flow
            pre
                code.shell git reset --ff-only &lt;hash&gt;
section
    h1 Caveats
section
    ul(style='width: 90%;')
        li
            div we did not cover working with remotes
            pre
                code.shell git pull origin develop --rebase
        li
            div rebase is destructive
            pre
                code.shell git push --force
section
    h3 Homework
    div learn git stash
section
    h1 Questions